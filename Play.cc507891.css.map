{"mappings":"AAAA,qBC4OE,mBAAA,CDlOA,YAAa,CCsOb,qBAAA,CAFA,WAAW,CADX,gBAAA,CDvOA,eAAgB,CCiOhB,mBAAA,CADA,iBAAF,CAEE,UAAW,CACX,KAAK,CACL,WAOA,CDpOF,2BCsOE,YAAa,CDpOb,QCsOA,CDpOF,mCCsOE,aACE","sources":["%3Cinput%20css%20rPc0FQ%3E","client/views/Play.vue"],"sourcesContent":[".chat[data-v-324739] {\n  position: absolute;\n  pointer-events: none;\n  right: 30px;\n  top: 0;\n  width: 300px;\n  overflow: hidden;\n  align-items: stretch;\n  max-height: 300px;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n.chat .item[data-v-324739] {\n  display: flex;\n  gap: 10px;\n}\n.chat .item.correct[data-v-324739] {\n  color: #18bb67;\n}\n/*# sourceMappingURL=Play.cc507891.css.map */\n","<template>\n  <div class=\"flex flex-col h-screen\">\n    <Header />\n    <div\n      class=\"flex flex-grow flex-col items-center mt-16 relative\"\n      v-if=\"ready\"\n    >\n      <div class=\"chat\" v-if=\"showChat\">\n        <div v-for=\"i in chat\" :class=\"{ correct: i.correct, item: true }\">\n          <span>{{ i.state['display-name'] ?? i.state.username }}</span>\n          <span>{{ i.chat }}</span>\n        </div>\n      </div>\n      <div class=\"text-6xl font-black\">\n        {{ currentTurn + 1 }} / {{ wordSet.length }} 라운드\n      </div>\n      <div class=\"flex mt-8 border-2 border-black\">\n        <div\n          class=\"border border-4 border-black w-32 h-32 flex font-bold items-center justify-center text-8xl cursor-pointer\"\n          @click=\"showChar(parseInt(i))\"\n          v-for=\"[i, char] in Object.entries(currentWord.word.split(''))\"\n        >\n          {{\n            isAnswerVisible || shownChars.includes(parseInt(i))\n              ? char\n              : getChosung(char)\n          }}\n        </div>\n      </div>\n      <div class=\"mt-8 text-4xl font-bold text-center\" v-if=\"hintLevel >= 1\">\n        {{\n          currentWord.category\n            ? `주제: ${currentWord.category}`\n            : currentWord.hint\n        }}\n      </div>\n      <div\n        class=\"mt-8 text-4xl font-bold text-center\"\n        v-if=\"currentWord.category && hintLevel >= 2\"\n      >\n        {{ currentWord.hint }}\n      </div>\n      <div\n        v-if=\"currentWord.category ? hintLevel <= 1 : hintLevel <= 0\"\n        @click=\"setShowHint\"\n        class=\"mt-8 text-3xl cursor-pointer\"\n      >\n        클릭해서 힌트 보기\n      </div>\n      <div\n        v-if=\"matchedUser\"\n        class=\"fixed left-0 top-0 w-full h-full flex justify-center items-center bg-black bg-opacity-50\"\n      >\n        <div\n          class=\"p-8 bg-white flex flex-col items-center\"\n          style=\"min-width: 500px\"\n        >\n          <div class=\"text-4xl\">{{ matchedUser.username }} 정답!</div>\n          <div class=\"text-center text-6xl mt-8 font-bold\">\n            {{ currentWord.word }}\n          </div>\n          <div\n            class=\"border-2 text-center p-4 text-2xl mt-8 w-full cursor-pointer\"\n            @click=\"nextWord\"\n          >\n            {{ currentTurn + 1 === wordSet.length ? '결과 보기' : '다음' }}\n          </div>\n        </div>\n      </div>\n      <div class=\"flex-grow\"></div>\n      <div class=\"flex w-full justify-end p-4\">\n        <div\n          v-if=\"!isAnswerVisible\"\n          @click=\"showAnswer\"\n          class=\"bg-red-500 text-white py-4 px-6 rounded-lg cursor-pointer hover:brightness-90 transition-all active:brightness-75\"\n        >\n          정답 보기\n        </div>\n        <div\n          v-else\n          @click=\"nextWord\"\n          class=\"bg-green-500 text-white py-4 px-6 rounded-lg cursor-pointer hover:brightness-90 transition-all active:brightness-75\"\n        >\n          {{ currentTurn + 1 === wordSet.length ? '결과 보기' : '다음' }}\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport { useStore } from 'vuex'\nimport { Word } from '../types'\nimport Header from '../components/Header.vue'\nimport { createToast } from 'mosha-vue-toastify'\nimport { ChatUserstate, Client } from 'tmi.js'\nimport Hangul from 'hangul-js'\nimport { History } from '../store'\nimport { event } from 'vue-gtag'\n\nconst correctSound = new Audio(\n  // @ts-ignore\n  new URL('../assets/sfx/correct.wav', import.meta.url).toString()\n)\n\nexport default defineComponent({\n  components: { Header },\n  setup() {\n    const store = useStore()\n\n    store.state.history = []\n\n    return {\n      wordSet: computed<Word[]>(() => store.state.wordSet as Word[]),\n      tmi: computed<Client>(() => store.state.tmi as Client),\n      history: computed<History>(() => store.state.history),\n      store,\n      showChat: computed(() => store.state.showChat),\n    }\n  },\n  computed: {\n    currentWord() {\n      const vm = this as { wordSet: Word[]; currentTurn: number }\n\n      return vm.wordSet[vm.currentTurn]\n    },\n  },\n  data() {\n    return {\n      currentTurn: 0,\n      ready: false,\n      matchedUser: null as null | { username: string },\n      hintLevel: 0,\n      isAnswerVisible: false,\n      chat: [] as { chat: string; state: ChatUserstate; correct?: boolean }[],\n      shownChars: [] as number[],\n    }\n  },\n  mounted() {\n    if (!this.wordSet) {\n      if (process.env.NODE_ENV === 'development') {\n        this.store.state.wordSet = JSON.parse(localStorage.custom_words)\n        this.tmi.on('message', this.onChat)\n        this.ready = true\n        return\n      }\n      createToast('단어 데이터가 설정되지 않았습니다.', { type: 'danger' })\n      this.$router.push('/')\n      return\n    }\n    this.tmi.on('message', this.onChat)\n    this.ready = true\n    event('game_start', { channel: this.tmi.getChannels()[0] })\n  },\n  unmounted() {\n    this.tmi.removeListener('message', this.onChat)\n    event('game_end', { channel: this.tmi.getChannels()[0] })\n  },\n  methods: {\n    onChat(channel: string, userState: ChatUserstate, message: string) {\n      const addChat = () => {\n        this.chat.push({\n          chat: message,\n          state: userState,\n        })\n        if (this.chat.length > 10) {\n          this.chat.shift()\n        }\n      }\n      if (this.matchedUser || this.isAnswerVisible) return addChat()\n      const matched = this.currentWord.word === message\n      if (matched) {\n        const username = (userState['display-name'] ??\n          userState.username) as string\n        this.matchedUser = { username }\n        correctSound.play()\n        this.chat.push({\n          chat: message,\n          state: userState,\n          correct: true,\n        })\n        if (this.chat.length > 10) {\n          this.chat.shift()\n        }\n        this.history.push({\n          user: username,\n          word: this.currentWord.word,\n        })\n        return\n      }\n      addChat()\n    },\n    getChosung(char: string) {\n      return Hangul.disassemble(char)[0]\n    },\n    nextWord() {\n      if (this.wordSet.length - 1 === this.currentTurn) {\n        this.$router.push('/result')\n        return\n      }\n      this.shownChars = []\n      this.matchedUser = null\n      this.hintLevel = 0\n      this.isAnswerVisible = false\n      this.currentTurn++\n    },\n    setShowHint() {\n      this.hintLevel += 1\n    },\n    showAnswer() {\n      this.history.push({\n        user: null,\n        word: this.currentWord.word,\n      })\n      this.hintLevel = 2\n      this.isAnswerVisible = true\n    },\n    showChar(index: number) {\n      if (this.shownChars.includes(index)) return\n      this.shownChars.push(index)\n      if (this.shownChars.length === this.currentWord.word.length) {\n        this.showAnswer()\n      }\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n.chat {\n  position: absolute;\n  pointer-events: none;\n  right: 30px;\n  top: 0;\n\n  width: 300px;\n  overflow: hidden;\n  align-items: stretch;\n\n  max-height: 300px;\n  height: 100%;\n\n  display: flex;\n\n  flex-direction: column;\n\n  .item {\n    display: flex;\n    gap: 10px;\n\n    &.correct {\n      color: #18bb67;\n    }\n  }\n}\n</style>\n"],"names":[],"version":3,"file":"Play.cc507891.css.map"}