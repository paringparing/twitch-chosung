{"mappings":"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","sources":["client/views/Play.vue","node_modules/hangul-js/hangul.js"],"sourcesContent":["<template>\n  <div>\n    <Header />\n    <div class=\"flex flex-col items-center mt-16\" v-if=\"ready\">\n      <div class=\"text-6xl font-black\">\n        {{ currentTurn + 1 }} / {{ wordSet.length }} 라운드\n      </div>\n      <div class=\"flex mt-8\">\n        <div\n          class=\"border w-32 h-32 flex font-bold items-center justify-center text-8xl\"\n          v-for=\"char in currentWord.word.split('')\"\n        >\n          {{ getChosung(char) }}\n        </div>\n      </div>\n      <div class=\"mt-8 text-4xl font-bold\" v-if=\"showHint\">{{ currentWord.hint }}</div>\n      <div v-else @click=\"setShowHint\" class=\"mt-8 text-3xl cursor-pointer\">\n        클릭해서 힌트 보기\n      </div>\n      <div\n        v-if=\"matchedUser\"\n        class=\"fixed left-0 top-0 w-full h-full flex justify-center items-center bg-black bg-opacity-50\"\n      >\n        <div\n          class=\"p-8 bg-white flex flex-col items-center\"\n          style=\"min-width: 500px\"\n        >\n          <div class=\"text-4xl\">{{ matchedUser.username }} 정답!</div>\n          <div class=\"text-center text-6xl mt-8 font-bold\">\n            {{ currentWord.word }}\n          </div>\n          <div\n            class=\"border text-center p-4 text-2xl mt-8 w-full cursor-pointer\"\n            @click=\"nextWord\"\n          >\n            {{ currentTurn + 1 === wordSet.length ? '결과 보기' : '다음' }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport { useStore } from 'vuex'\nimport { Word } from '../types'\nimport Header from '../components/Header.vue'\nimport { createToast } from 'mosha-vue-toastify'\nimport { ChatUserstate, Client } from 'tmi.js'\nimport Hangul from 'hangul-js'\nimport { History } from '../store'\n\nexport default defineComponent({\n  components: { Header },\n  setup() {\n    const store = useStore()\n\n    store.state.history = []\n\n    return {\n      wordSet: computed<Word[]>(() => store.state.wordSet as Word[]),\n      tmi: computed<Client>(() => store.state.tmi as Client),\n      history: computed<History>(() => store.state.history),\n    }\n  },\n  computed: {\n    currentWord() {\n      const vm = this as { wordSet: Word[]; currentTurn: number }\n\n      return vm.wordSet[vm.currentTurn]\n    },\n  },\n  data() {\n    return {\n      currentTurn: 0,\n      ready: false,\n      matchedUser: null as null | { username: string },\n      showHint: false\n    }\n  },\n  mounted() {\n    if (!this.wordSet) {\n      createToast('단어 데이터가 설정되지 않았습니다.', { type: 'danger' })\n      this.$router.push('/')\n      return\n    }\n    this.tmi.on('message', this.onChat)\n    this.ready = true\n  },\n  unmounted() {\n    this.tmi.removeListener('message', this.onChat)\n  },\n  methods: {\n    onChat(channel: string, userState: ChatUserstate, message: string) {\n      if (this.matchedUser) return\n      const matched = this.currentWord.word === message\n      if (matched) {\n        const username = (userState['display-name'] ??\n          userState.username) as string\n        this.matchedUser = { username }\n        this.history.push({\n          user: username,\n          word: this.currentWord.word,\n        })\n      }\n    },\n    getChosung(char: string) {\n      return Hangul.disassemble(char)[0]\n    },\n    nextWord() {\n      if (this.wordSet.length - 1 === this.currentTurn) {\n        this.$router.push('/result')\n        return\n      }\n      this.matchedUser = null\n      this.showHint = false\n      this.currentTurn++\n    },\n    setShowHint() {\n      this.showHint = true\n    }\n  },\n})\n</script>\n\n<style scoped></style>\n","/**\r\n * Hangul.js\r\n * https://github.com/e-/Hangul.js\r\n *\r\n * Copyright 2017, Jaemin Jo\r\n * under the MIT license.\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n    var CHO = [\r\n        'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ',\r\n        'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ',\r\n        'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ',\r\n        'ㅍ', 'ㅎ'\r\n    ],\r\n        JUNG = [\r\n            'ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ',\r\n            'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', ['ㅗ', 'ㅏ'], ['ㅗ', 'ㅐ'],\r\n            ['ㅗ', 'ㅣ'], 'ㅛ', 'ㅜ', ['ㅜ', 'ㅓ'], ['ㅜ', 'ㅔ'], ['ㅜ', 'ㅣ'],\r\n            'ㅠ', 'ㅡ', ['ㅡ', 'ㅣ'], 'ㅣ'\r\n        ],\r\n        JONG = [\r\n            '', 'ㄱ', 'ㄲ', ['ㄱ', 'ㅅ'], 'ㄴ', ['ㄴ', 'ㅈ'], ['ㄴ', 'ㅎ'], 'ㄷ', 'ㄹ',\r\n            ['ㄹ', 'ㄱ'], ['ㄹ', 'ㅁ'], ['ㄹ', 'ㅂ'], ['ㄹ', 'ㅅ'], ['ㄹ', 'ㅌ'], ['ㄹ', 'ㅍ'], ['ㄹ', 'ㅎ'], 'ㅁ',\r\n            'ㅂ', ['ㅂ', 'ㅅ'], 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\r\n        ],\r\n        HANGUL_OFFSET = 0xAC00,\r\n        CONSONANTS = [\r\n            'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄸ',\r\n            'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ',\r\n            'ㅁ', 'ㅂ', 'ㅃ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ',\r\n            'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\r\n        ],\r\n        COMPLETE_CHO = [\r\n            'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ',\r\n            'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ',\r\n            'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\r\n        ],\r\n        COMPLETE_JUNG = [\r\n            'ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ',\r\n            'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', 'ㅘ', 'ㅙ',\r\n            'ㅚ', 'ㅛ', 'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ',\r\n            'ㅠ', 'ㅡ', 'ㅢ', 'ㅣ'\r\n        ],\r\n        COMPLETE_JONG = [\r\n            '', 'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄹ',\r\n            'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 'ㅁ',\r\n            'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\r\n        ],\r\n        COMPLEX_CONSONANTS = [\r\n            ['ㄱ', 'ㅅ', 'ㄳ'],\r\n            ['ㄴ', 'ㅈ', 'ㄵ'],\r\n            ['ㄴ', 'ㅎ', 'ㄶ'],\r\n            ['ㄹ', 'ㄱ', 'ㄺ'],\r\n            ['ㄹ', 'ㅁ', 'ㄻ'],\r\n            ['ㄹ', 'ㅂ', 'ㄼ'],\r\n            ['ㄹ', 'ㅅ', 'ㄽ'],\r\n            ['ㄹ', 'ㅌ', 'ㄾ'],\r\n            ['ㄹ', 'ㅍ', 'ㄿ'],\r\n            ['ㄹ', 'ㅎ', 'ㅀ'],\r\n            ['ㅂ', 'ㅅ', 'ㅄ']\r\n        ],\r\n        COMPLEX_VOWELS = [\r\n            ['ㅗ', 'ㅏ', 'ㅘ'],\r\n            ['ㅗ', 'ㅐ', 'ㅙ'],\r\n            ['ㅗ', 'ㅣ', 'ㅚ'],\r\n            ['ㅜ', 'ㅓ', 'ㅝ'],\r\n            ['ㅜ', 'ㅔ', 'ㅞ'],\r\n            ['ㅜ', 'ㅣ', 'ㅟ'],\r\n            ['ㅡ', 'ㅣ', 'ㅢ']\r\n        ],\r\n        CONSONANTS_HASH,\r\n        CHO_HASH,\r\n        JUNG_HASH,\r\n        JONG_HASH,\r\n        COMPLEX_CONSONANTS_HASH,\r\n        COMPLEX_VOWELS_HASH\r\n        ;\r\n\r\n    function _makeHash(array) {\r\n        var length = array.length,\r\n            hash = { 0: 0 }\r\n            ;\r\n        for (var i = 0; i < length; i++) {\r\n            if (array[i])\r\n                hash[array[i].charCodeAt(0)] = i;\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    CONSONANTS_HASH = _makeHash(CONSONANTS);\r\n    CHO_HASH = _makeHash(COMPLETE_CHO);\r\n    JUNG_HASH = _makeHash(COMPLETE_JUNG);\r\n    JONG_HASH = _makeHash(COMPLETE_JONG);\r\n\r\n    function _makeComplexHash(array) {\r\n        var length = array.length,\r\n            hash = {},\r\n            code1,\r\n            code2\r\n            ;\r\n        for (var i = 0; i < length; i++) {\r\n            code1 = array[i][0].charCodeAt(0);\r\n            code2 = array[i][1].charCodeAt(0);\r\n            if (typeof hash[code1] === 'undefined') {\r\n                hash[code1] = {};\r\n            }\r\n            hash[code1][code2] = array[i][2].charCodeAt(0);\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    COMPLEX_CONSONANTS_HASH = _makeComplexHash(COMPLEX_CONSONANTS);\r\n    COMPLEX_VOWELS_HASH = _makeComplexHash(COMPLEX_VOWELS);\r\n\r\n    function _isConsonant(c) {\r\n        return typeof CONSONANTS_HASH[c] !== 'undefined';\r\n    }\r\n\r\n    function _isCho(c) {\r\n        return typeof CHO_HASH[c] !== 'undefined';\r\n    }\r\n\r\n    function _isJung(c) {\r\n        return typeof JUNG_HASH[c] !== 'undefined';\r\n    }\r\n\r\n    function _isJong(c) {\r\n        return typeof JONG_HASH[c] !== 'undefined';\r\n    }\r\n\r\n    function _isHangul(c /* code number */) {\r\n        return 0xAC00 <= c && c <= 0xd7a3;\r\n    }\r\n\r\n    function _isJungJoinable(a, b) {\r\n        return (COMPLEX_VOWELS_HASH[a] && COMPLEX_VOWELS_HASH[a][b]) ? COMPLEX_VOWELS_HASH[a][b] : false;\r\n    }\r\n\r\n    function _isJongJoinable(a, b) {\r\n        return COMPLEX_CONSONANTS_HASH[a] && COMPLEX_CONSONANTS_HASH[a][b] ? COMPLEX_CONSONANTS_HASH[a][b] : false;\r\n    }\r\n\r\n    var disassemble = function (string, grouped) {\r\n        if (string === null) {\r\n            throw new Error('Arguments cannot be null');\r\n        }\r\n\r\n        if (typeof string === 'object') {\r\n            string = string.join('');\r\n        }\r\n\r\n        var result = [],\r\n            length = string.length,\r\n            cho,\r\n            jung,\r\n            jong,\r\n            code,\r\n            r\r\n            ;\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            var temp = [];\r\n\r\n            code = string.charCodeAt(i);\r\n            if (_isHangul(code)) { // 완성된 한글이면\r\n                code -= HANGUL_OFFSET;\r\n                jong = code % 28;\r\n                jung = (code - jong) / 28 % 21;\r\n                cho = parseInt((code - jong) / 28 / 21);\r\n                temp.push(CHO[cho]);\r\n                if (typeof JUNG[jung] === 'object') {\r\n                    temp = temp.concat(JUNG[jung]);\r\n                } else {\r\n                    temp.push(JUNG[jung]);\r\n                }\r\n                if (jong > 0) {\r\n                    if (typeof JONG[jong] === 'object') {\r\n                        temp = temp.concat(JONG[jong]);\r\n                    } else {\r\n                        temp.push(JONG[jong]);\r\n                    }\r\n                }\r\n            } else if (_isConsonant(code)) { //자음이면\r\n                if (_isCho(code)) {\r\n                    r = CHO[CHO_HASH[code]];\r\n                } else {\r\n                    r = JONG[JONG_HASH[code]];\r\n                }\r\n                if (typeof r === 'string') {\r\n                    temp.push(r);\r\n                } else {\r\n                    temp = temp.concat(r);\r\n                }\r\n            } else if (_isJung(code)) {\r\n                r = JUNG[JUNG_HASH[code]];\r\n                if (typeof r === 'string') {\r\n                    temp.push(r);\r\n                } else {\r\n                    temp = temp.concat(r);\r\n                }\r\n            } else {\r\n                temp.push(string.charAt(i));\r\n            }\r\n\r\n            if (grouped) result.push(temp);\r\n            else result = result.concat(temp);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    var disassembleToString = function (str) {\r\n        if (typeof str !== 'string') {\r\n            return '';\r\n        }\r\n        str = disassemble(str);\r\n        return str.join('');\r\n    };\r\n\r\n    var assemble = function (array) {\r\n        if (typeof array === 'string') {\r\n            array = disassemble(array);\r\n        }\r\n\r\n        var result = [],\r\n            length = array.length,\r\n            code,\r\n            stage = 0,\r\n            complete_index = -1, //완성된 곳의 인덱스\r\n            previous_code,\r\n            jong_joined = false\r\n            ;\r\n\r\n        function _makeHangul(index) { // complete_index + 1부터 index까지를 greedy하게 한글로 만든다.\r\n            var code,\r\n                cho,\r\n                jung1,\r\n                jung2,\r\n                jong1 = 0,\r\n                jong2,\r\n                hangul = ''\r\n                ;\r\n\r\n            jong_joined = false;\r\n            if (complete_index + 1 > index) {\r\n                return;\r\n            }\r\n            for (var step = 1; ; step++) {\r\n                if (step === 1) {\r\n                    cho = array[complete_index + step].charCodeAt(0);\r\n                    if (_isJung(cho)) { // 첫번째 것이 모음이면 1) ㅏ같은 경우이거나 2) ㅙ같은 경우이다\r\n                        if (complete_index + step + 1 <= index && _isJung(jung1 = array[complete_index + step + 1].charCodeAt(0))) { //다음것이 있고 모음이면\r\n                            result.push(String.fromCharCode(_isJungJoinable(cho, jung1)));\r\n                            complete_index = index;\r\n                            return;\r\n                        } else {\r\n                            result.push(array[complete_index + step]);\r\n                            complete_index = index;\r\n                            return;\r\n                        }\r\n                    } else if (!_isCho(cho)) {\r\n                        result.push(array[complete_index + step]);\r\n                        complete_index = index;\r\n                        return;\r\n                    }\r\n                    hangul = array[complete_index + step];\r\n                } else if (step === 2) {\r\n                    jung1 = array[complete_index + step].charCodeAt(0);\r\n                    if (_isCho(jung1)) { //두번째 또 자음이 오면 ㄳ 에서 ㅅ같은 경우이다\r\n                        cho = _isJongJoinable(cho, jung1);\r\n                        hangul = String.fromCharCode(cho);\r\n                        result.push(hangul);\r\n                        complete_index = index;\r\n                        return;\r\n                    } else {\r\n                        hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + HANGUL_OFFSET);\r\n                    }\r\n                } else if (step === 3) {\r\n                    jung2 = array[complete_index + step].charCodeAt(0);\r\n                    if (_isJungJoinable(jung1, jung2)) {\r\n                        jung1 = _isJungJoinable(jung1, jung2);\r\n                    } else {\r\n                        jong1 = jung2;\r\n                    }\r\n                    hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\r\n                    \r\n                } else if (step === 4) {\r\n                    jong2 = array[complete_index + step].charCodeAt(0);\r\n                    if (_isJongJoinable(jong1, jong2)) {\r\n                        jong1 = _isJongJoinable(jong1, jong2);\r\n                    } else {\r\n                        jong1 = jong2;\r\n                    }\r\n                    hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\r\n                } else if (step === 5) {\r\n                    jong2 = array[complete_index + step].charCodeAt(0);\r\n                    jong1 = _isJongJoinable(jong1, jong2);\r\n                    hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\r\n                }\r\n\r\n                if (complete_index + step >= index) {\r\n                    result.push(hangul);\r\n                    complete_index = index;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            code = array[i].charCodeAt(0);\r\n            if (!_isCho(code) && !_isJung(code) && !_isJong(code)) { //초, 중, 종성 다 아니면\r\n                _makeHangul(i - 1);\r\n                _makeHangul(i);\r\n                stage = 0;\r\n                continue;\r\n            }\r\n            //console.log(stage, array[i]);\r\n            if (stage === 0) { // 초성이 올 차례\r\n                if (_isCho(code)) { // 초성이 오면 아무 문제 없다.\r\n                    stage = 1;\r\n                } else if (_isJung(code)) {\r\n                    // 중성이오면 ㅐ 또는 ㅘ 인것이다. 바로 구분을 못한다. 따라서 특수한 stage인 stage4로 이동\r\n                    stage = 4;\r\n                }\r\n            } else if (stage == 1) { //중성이 올 차례\r\n                if (_isJung(code)) { //중성이 오면 문제없음 진행.\r\n                    stage = 2;\r\n                } else { //아니고 자음이오면 ㄻ같은 경우가 있고 ㄹㅋ같은 경우가 있다.\r\n                    if (_isJongJoinable(previous_code, code)) {\r\n                        // 합쳐질 수 있다면 ㄻ 같은 경우인데 이 뒤에 모음이 와서 ㄹ마 가 될수도 있고 초성이 올 수도 있다. 따라서 섣불리 완성할 수 없다. 이땐 stage5로 간다.\r\n                        stage = 5;\r\n                    } else { //합쳐질 수 없다면 앞 글자 완성 후 여전히 중성이 올 차례\r\n                        _makeHangul(i - 1);\r\n                    }\r\n                }\r\n            } else if (stage == 2) { //종성이 올 차례\r\n                if (_isJong(code)) { //종성이 오면 다음엔 자음 또는 모음이 온다.\r\n                    stage = 3;\r\n                } else if (_isJung(code)) { //그런데 중성이 오면 앞의 모음과 합칠 수 있는지 본다.\r\n                    if (_isJungJoinable(previous_code, code)) { //합칠 수 있으면 여전히 종성이 올 차례고 그대로 진행\r\n                    } else { // 합칠 수 없다면 오타가 생긴 경우\r\n                        _makeHangul(i - 1);\r\n                        stage = 4;\r\n                    }\r\n                } else { // 받침이 안되는 자음이 오면 ㄸ 같은 이전까지 완성하고 다시시작\r\n                    _makeHangul(i - 1);\r\n                    stage = 1;\r\n                }\r\n            } else if (stage == 3) { // 종성이 하나 온 상태.\r\n                if (_isJong(code)) { // 또 종성이면 합칠수 있는지 본다.\r\n                    if (!jong_joined && _isJongJoinable(previous_code, code)) { //합칠 수 있으면 계속 진행. 왜냐하면 이번에 온 자음이 다음 글자의 초성이 될 수도 있기 때문. 대신 이 기회는 한번만\r\n                        jong_joined = true;\r\n                    } else { //없으면 한글자 완성\r\n                        _makeHangul(i - 1);\r\n                        stage = 1; // 이 종성이 초성이 되고 중성부터 시작\r\n                    }\r\n                } else if (_isCho(code)) { // 초성이면 한글자 완성.\r\n                    _makeHangul(i - 1);\r\n                    stage = 1; //이 글자가 초성이되므로 중성부터 시작\r\n                } else if (_isJung(code)) { // 중성이면 이전 종성은 이 중성과 합쳐지고 앞 글자는 받침이 없다.\r\n                    _makeHangul(i - 2);\r\n                    stage = 2;\r\n                }\r\n            } else if (stage == 4) { // 중성이 하나 온 상태\r\n                if (_isJung(code)) { //중성이 온 경우\r\n                    if (_isJungJoinable(previous_code, code)) { //이전 중성과 합쳐질 수 있는 경우\r\n                        _makeHangul(i);\r\n                        stage = 0;\r\n                    } else { //중성이 왔지만 못합치는 경우. ㅒㅗ 같은\r\n                        _makeHangul(i - 1);\r\n                    }\r\n                } else { // 아니면 자음이 온 경우.\r\n                    _makeHangul(i - 1);\r\n                    stage = 1;\r\n                }\r\n            } else if (stage == 5) { // 초성이 연속해서 두개 온 상태 ㄺ\r\n                if (_isJung(code)) { //이번에 중성이면 ㄹ가\r\n                    _makeHangul(i - 2);\r\n                    stage = 2;\r\n                } else {\r\n                    _makeHangul(i - 1);\r\n                    stage = 1;\r\n                }\r\n            }\r\n            previous_code = code;\r\n        }\r\n        _makeHangul(i - 1);\r\n        return result.join('');\r\n    };\r\n\r\n    var search = function (a, b) {\r\n        var ad = disassemble(a).join(''),\r\n            bd = disassemble(b).join('')\r\n            ;\r\n\r\n        return ad.indexOf(bd);\r\n    };\r\n\r\n    var rangeSearch = function (haystack, needle) {\r\n        var hex = disassemble(haystack).join(''),\r\n            nex = disassemble(needle).join(''),\r\n            grouped = disassemble(haystack, true),\r\n            re = new RegExp(nex, 'gi'),\r\n            indices = [],\r\n            result;\r\n\r\n        if (!needle.length) return [];\r\n\r\n        while ((result = re.exec(hex))) {\r\n            indices.push(result.index);\r\n        }\r\n\r\n        function findStart(index) {\r\n            for (var i = 0, length = 0; i < grouped.length; ++i) {\r\n                length += grouped[i].length;\r\n                if (index < length) return i;\r\n            }\r\n        }\r\n\r\n        function findEnd(index) {\r\n            for (var i = 0, length = 0; i < grouped.length; ++i) {\r\n                length += grouped[i].length;\r\n                if (index + nex.length <= length) return i;\r\n            }\r\n        }\r\n\r\n        return indices.map(function (i) {\r\n            return [findStart(i), findEnd(i)];\r\n        });\r\n    };\r\n\r\n    function Searcher(string) {\r\n        this.string = string;\r\n        this.disassembled = disassemble(string).join('');\r\n    }\r\n\r\n    Searcher.prototype.search = function (string) {\r\n        return disassemble(string).join('').indexOf(this.disassembled);\r\n    };\r\n    var endsWithConsonant = function (string) {\r\n        if (typeof string === 'object') {\r\n            string = string.join('');\r\n        }\r\n\r\n        var code = string.charCodeAt(string.length - 1);\r\n\r\n        if (_isHangul(code)) { // 완성된 한글이면\r\n            code -= HANGUL_OFFSET;\r\n            var jong = code % 28;\r\n            if (jong > 0) {\r\n                return true;\r\n            }\r\n        } else if (_isConsonant(code)) { //자음이면\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    var endsWith = function (string, target) {\r\n        return disassemble(string).pop() === target;\r\n    };\r\n\r\n\r\n    var hangul = {\r\n        disassemble: disassemble,\r\n        d: disassemble, // alias for disassemble\r\n        disassembleToString: disassembleToString,\r\n        ds: disassembleToString, // alias for disassembleToString\r\n        assemble: assemble,\r\n        a: assemble, // alias for assemble\r\n        search: search,\r\n        rangeSearch: rangeSearch,\r\n        Searcher: Searcher,\r\n        endsWithConsonant: endsWithConsonant,\r\n        endsWith: endsWith,\r\n        isHangul: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isHangul(c);\r\n        },\r\n        isComplete: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isHangul(c);\r\n        },\r\n        isConsonant: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isConsonant(c);\r\n        },\r\n        isVowel: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isJung(c);\r\n        },\r\n        isCho: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isCho(c);\r\n        },\r\n        isJong: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isJong(c);\r\n        },\r\n        isHangulAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isHangul(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isCompleteAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isHangul(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isConsonantAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isConsonant(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isVowelAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isJung(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isChoAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isCho(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isJongAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isJong(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        }\r\n    };\r\n\r\n    if (typeof define == 'function' && define.amd) {\r\n        define(function () {\r\n            return hangul;\r\n        });\r\n    } else if (typeof module !== 'undefined') {\r\n        module.exports = hangul;\r\n    } else {\r\n        window.Hangul = hangul;\r\n    }\r\n})();\r\n\r\n"],"names":["$c9be8de48650ba6e$var$script","parcelRequire","__esModule","default","render","__scopeId","__file","$c9be8de48650ba6e$export$2e2bcd8739ae039","$044ca14788a82734$export$2e2bcd8739ae039","$ecd4d","defineComponent","components","$1Za3e","setup","store","$jgDES","useStore","state","history","wordSet","computed","tmi","currentWord","this","currentTurn","data","ready","matchedUser","showHint","mounted","$4t2Ub","createToast","type","$router","push","on","onChat","unmounted","removeListener","methods","channel","userState","message","word","username","user","getChosung","char","$parcel$interopDefault","$5y14U","disassemble","nextWord","length","setShowHint","CHO_HASH","JUNG_HASH","JONG_HASH","COMPLEX_CONSONANTS_HASH","COMPLEX_VOWELS_HASH","CHO","_makeHash","array","hash","i","charCodeAt","_makeComplexHash","code2","code1","_isConsonant","c","CONSONANTS_HASH","_isCho","_isJung","_isJong","_isHangul","_isJungJoinable","a","b","_isJongJoinable","string","grouped","Error","join","cho","jung","jong","code","r","temp","HANGUL_OFFSET","JUNG","concat","JONG","charAt","result","disassembleToString","str","previous_code","stage","complete_index","jong_joined","index","jung1","jung2","jong2","jong1","hangul","step","String","fromCharCode","_makeHangul","Searcher","disassembled","prototype","search","indexOf","hangul1","d","ds","assemble","bd","haystack","needle","nex","re","RegExp","indices","exec","hex","findStart","findEnd","map","endsWithConsonant","target","pop","isHangulAll","isCompleteAll","isConsonantAll","isVowelAll","isChoAll","isJongAll","class","$7b4745cbc29b6c41$var$_hoisted_2","$7b4745cbc29b6c41$var$_hoisted_3","$7b4745cbc29b6c41$var$_hoisted_4","style","$7b4745cbc29b6c41$var$_hoisted_8","$7b4745cbc29b6c41$var$_hoisted_9","openBlock","createElementBlock","createVNode","_component_Header","_ctx","$7b4745cbc29b6c41$var$_hoisted_1","createElementVNode","toDisplayString","Fragment","renderList","split","$7b4745cbc29b6c41$var$_hoisted_5","hint","onClick","_cache","args","$7b4745cbc29b6c41$var$_hoisted_6","$7b4745cbc29b6c41$var$_hoisted_7","$69e17066b37f2a00$export$2e2bcd8739ae039","script"],"version":3,"file":"Play.d151c6dd.js.map"}